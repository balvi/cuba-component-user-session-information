
buildscript {
    ext.cubaVersion = '6.8.0'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        classpath 'net.saliman:gradle-cobertura-plugin:2.3.2'

        
    }
}

def globalModule = project(':sessioninfo-global')
def coreModule = project(':sessioninfo-core')
def guiModule = project(':sessioninfo-gui')
def webModule = project(':sessioninfo-web')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'idea')
apply(plugin: 'cuba')

def bintrayRepositoryUrl = "https://api.bintray.com/maven/balvi/cuba-components/cuba-component-user-session-information/;publish=1"

cuba {
    artifact {
        group = 'de.balvi.cuba.sessioninfo'
        version = '0.5.0'
        isSnapshot = false
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    uploadRepository {
        if (cuba.artifact.isSnapshot) {
            url = System.properties['uploadRepositorySnapshot'] ?: System.env.UPLOAD_REPOSITORY_SNAPSHOT
        } else {
            url = System.properties['uploadRepositoryRelease'] ?: System.env.UPLOAD_REPOSITORY_RELEASE ?: bintrayRepositoryUrl
        }

        user = System.properties['uploadRepositoryUsername'] ?: System.env.UPLOAD_REPOSITORY_USERNAME
        password = System.properties['uploadRepositoryPassword'] ?:System.env.UPLOAD_REPOSITORY_PASSWORD
    }
    ide {
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}


def hsql = 'org.hsqldb:hsqldb:2.2.9'


allprojects {
    apply plugin: 'net.saliman.cobertura'
}

def files = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/build/cobertura/cobertura.ser')}
def sourceDirs = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/src')}
cobertura {
    coverageFormats = ['html', 'xml']
    coverageMergeDatafiles = files
    coverageCheckTotalBranchRate = 65
    coverageCheckTotalLineRate = 85
    coverageCheckHaltOnFailure = true
    coverageSourceDirs = sourceDirs
//    coverageCheckLineRate = 1
    coverageCheckRegexes = [[regex: '.*\\$.*', branchRate: 0, lineRate: 0]]

}


test.dependsOn(subprojects.collect{ ":${it.name}:test"} )
test.finalizedBy(project.tasks.cobertura)
test.finalizedBy(project.tasks.coberturaCheck)

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
        testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
        testCompile('org.springframework:spring-test:4.3.1.RELEASE')
        testRuntime "cglib:cglib-nodep:3.2.4"
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'groovy')


    apply plugin: 'codenarc'

    codenarc {
        toolVersion = "0.24"
        ignoreFailures = false
        reportFormat = 'html'
        reportsDir = new File("./build/reports/codenarc")
    }

    apply plugin: 'net.saliman.cobertura'

    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageIgnores = ['org.slf4j.Logger.*']
        coverageReportDir = new File("$buildDir/reports/cobertura")

        coverageExcludes = [
                '.*Enum'
        ]
    }

    test.finalizedBy(project.tasks.cobertura)
    test.finalizedBy(project.tasks.coberturaCheck)

    codenarcMain {
        configFile = rootProject.file("config/codenarc/rulesMain.groovy")
    }
    codenarcTest {
        configFile = rootProject.file("config/codenarc/rulesTests.groovy")
    }

    sourceSets {
        main { groovy { srcDirs = ["src"] } }
        test { groovy { srcDirs = ["test"] } }
    }
}


configure(globalModule) {
    task enhance(type: CubaEnhancing)
    
    
    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
    
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/sessioninfo-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'sessioninfo-core'
        appJars('sessioninfo-global', 'sessioninfo-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sessioninfo'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sessioninfo'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/balvi/cuba/sessioninfo/**"
        into "$cuba.tomcat.dir/conf/sessioninfo"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/balvi/cuba/sessioninfo/**"
        into "$cuba.tomcat.dir/conf/sessioninfo"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'sessioninfo'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/sessioninfo')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'sessioninfo'
        appJars('sessioninfo-global', 'sessioninfo-gui', 'sessioninfo-web')
    }
}





task undeploy(type: Delete, dependsOn: ':sessioninfo-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/sessioninfo-core")
    delete("$cuba.tomcat.dir/webapps/sessioninfo")
}

task restart(dependsOn: ['stop', ':sessioninfo-core:deploy', ':sessioninfo-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

apply from: 'extra.gradle'
