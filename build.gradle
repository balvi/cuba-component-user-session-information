buildscript {
    ext.cubaVersion = '7.0.0'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
        classpath "net.saliman:gradle-cobertura-plugin:2.6.0"
    }
}

def modulePrefix = 'sessioninfo'

def globalModule = project(":${modulePrefix}-global" )
def coreModule = project(":${modulePrefix}-core" )
def guiModule = project(":${modulePrefix}-gui" )
def webModule = project(":${modulePrefix}-web" )

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

def bintrayRepositoryUrl = "https://api.bintray.com/maven/balvi/cuba-components/cuba-component-user-session-information/;publish=1"

cuba {
    artifact {
        group = 'de.balvi.cuba.sessioninfo'
        version = '0.8.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    uploadRepository {
        if (cuba.artifact.isSnapshot) {
            url = System.properties['uploadRepositorySnapshot'] ?: System.env.UPLOAD_REPOSITORY_SNAPSHOT
        } else {
            url = System.properties['uploadRepositoryRelease'] ?: System.env.UPLOAD_REPOSITORY_RELEASE ?: bintrayRepositoryUrl
        }

        user = System.properties['uploadRepositoryUsername'] ?: System.env.UPLOAD_REPOSITORY_USERNAME
        password = System.properties['uploadRepositoryPassword'] ?: System.env.UPLOAD_REPOSITORY_PASSWORD
    }
    ide {
        vcs = 'Git'
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}


def hsql = 'org.hsqldb:hsqldb:2.2.9'


allprojects {
    apply plugin: 'net.saliman.cobertura'
}

cobertura {
    def coverageFiles = []
    def sourceDirs = []
    final LINE_COVERAGE_MIN_VALUE = 85
    final BRANCH_COVERAGE_MIN_VALUE = 65

    subprojects.each {
        String name = it.name.toLowerCase()
        if (!name.contains('theme')) {
            if (!name.contains('docs')) {
                coverageFiles << new File(it.projectDir, '/build/cobertura/cobertura.ser')
            }
            sourceDirs << new File(it.projectDir, '/src')
        }
    }
    coverageFormats = ['html', 'xml']
    coverageMergeDatafiles = coverageFiles
    coverageCheckTotalBranchRate = BRANCH_COVERAGE_MIN_VALUE
    coverageCheckTotalLineRate = LINE_COVERAGE_MIN_VALUE
    coverageCheckHaltOnFailure = true
    coverageSourceDirs = sourceDirs
    coverageCheckRegexes = [[regex: '.*\\$.*', branchRate: 0, lineRate: 0]]
}

test.dependsOn(subprojects.collect { ":${it.name}:test" })
test.finalizedBy(project.tasks.cobertura)
test.finalizedBy(project.tasks.coberturaCheck)

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
        testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
        testCompile('org.springframework:spring-test:4.3.1.RELEASE')
        testRuntime "cglib:cglib-nodep:3.2.4"
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'groovy')


    apply plugin: 'codenarc'

    codenarc {
        toolVersion = "0.24"
        ignoreFailures = false
        reportFormat = 'html'
        reportsDir = new File("./build/reports/codenarc")
    }

    apply plugin: 'net.saliman.cobertura'

    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageIgnores = ['org.slf4j.Logger.*']
        coverageReportDir = new File("$buildDir/reports/cobertura")

        coverageExcludes = [
                '.*Enum'
        ]
    }

    test.finalizedBy(project.tasks.cobertura)
    test.finalizedBy(project.tasks.coberturaCheck)

    codenarcMain {
        configFile = rootProject.file("config/codenarc/rulesMain.groovy")
    }
    codenarcTest {
        configFile = rootProject.file("config/codenarc/rulesTests.groovy")
    }

    sourceSets {
        main { groovy { srcDirs = ["src"] } }
        test { groovy { srcDirs = ["test"] } }
    }
}


configure(globalModule) {
    entitiesEnhancing {
        main { enabled = true }
    }

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

}

configure(coreModule) {
    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compileOnly(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}-core" )
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}-core"
        appJars(modulePrefix + '-global', modulePrefix + '-core')
    }

    task startDb(type: CubaHsqlStart) {
        dbName = 'sessioninfo'
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sessioninfo'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'sessioninfo'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/balvi/cuba/sessioninfo/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compileOnly(servletApi)
        compile(guiModule)

    }

    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/balvi/cuba/sessioninfo/**"
        into "$cuba.tomcat.dir/conf/${modulePrefix}"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = "${modulePrefix}"
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, "/conf/${modulePrefix}" )
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = "${modulePrefix}"
        appJars(modulePrefix + '-global', modulePrefix + '-gui', modulePrefix + '-web')
    }
}


task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf" ) {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core" )
    delete("$cuba.tomcat.dir/webapps/${modulePrefix}" )
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy" , ":${modulePrefix}-web:deploy" ], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
    }
    restart.finalizedBy(project.tasks.start)
}


apply from: 'extra.gradle'
